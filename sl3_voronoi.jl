using Pkg
Pkg.activate(normpath(joinpath(@__DIR__, "./")))
using LinearAlgebra
ENV["JULIA_NUM_THREADS"] = Sys.CPU_THREADS÷2
LinearAlgebra.BLAS.set_num_threads(Sys.CPU_THREADS÷2)
using Groups
using LowCohomologySOS

sl3 = MatrixGroups.SpecialLinearGroup{3}(Int8)
S = gens(sl3)
S_inv =[S; inv.(S)]
ball8, sizes = Groups.wlmetric_ball(S_inv, radius = 8)

function gelt_from_matrix(M::AbstractMatrix, group_subset)
    for g in group_subset
        if MatrixGroups.matrix_repr(g) == M
            return g
        end
    end
end

m2_stab = [gelt_from_matrix(M,ball8) for M in [
    [1 0 0; 0 1 0; 0 0 1], [-1 0 0; 0 -1 0; 0 0 1], [-1 0 0; 0 1 0; 0 0 -1], 
    [1 0 0; 0 -1 0; 0 0 -1], [-1 0 0; 0 0 1; 0 1 0], [1 0 0; 0 0 -1; 0 1 0], 
    [1 0 0; 0 0 1; 0 -1 0], [-1 0 0; 0 0 -1; 0 -1 0], [0 -1 0; 1 0 0; 0 0 1], 
    [0 1 0; -1 0 0; 0 0 1], [0 1 0; 1 0 0; 0 0 -1], [0 -1 0; -1 0 0; 0 0 -1], 
    [0 1 0; 0 0 1; 1 0 0], [0 -1 0; 0 0 -1; 1 0 0], [0 -1 0; 0 0 1; -1 0 0], 
    [0 1 0; 0 0 -1; -1 0 0], [0 0 1; 1 0 0; 0 1 0], [0 0 -1; -1 0 0; 0 1 0], 
    [0 0 -1; 1 0 0; 0 -1 0], [0 0 1; -1 0 0; 0 -1 0], [0 0 -1; 0 1 0; 1 0 0], 
    [0 0 1; 0 -1 0; 1 0 0], [0 0 1; 0 1 0; -1 0 0], [0 0 -1; 0 -1 0; -1 0 0]
]]
m31_stab = [gelt_from_matrix(M,ball8) for M in [
    [1 0 0; 0 1 0; 0 0 1], [-1 0 0; 0 -1 0; 0 0 1], [-1 0 0; 1 1 0; 0 0 -1], 
    [1 0 0; -1 -1 0; 0 0 -1], [0 1 0; 1 0 0; 0 0 -1], [0 -1 0; -1 0 0; 0 0 -1], 
    [0 -1 0; 1 1 0; 0 0 1], [0 1 0; -1 -1 0; 0 0 1], [-1 -1 0; 1 0 0; 0 0 1], 
    [1 1 0; -1 0 0; 0 0 1], [-1 -1 0; 0 1 0; 0 0 -1], [1 1 0; 0 -1 0; 0 0 -1]
]]
m32_stab = [gelt_from_matrix(M,ball8) for M in [
    [1 0 0; 0 1 0; 0 0 1], [-1 0 0; 0 -1 0; 1 1 1], [-1 0 0; 0 0 -1; 0 -1 0], 
    [1 0 0; 0 0 1; -1 -1 -1], [1 0 0; -1 -1 -1; 0 1 0], [-1 0 0; 1 1 1; 0 0 -1], 
    [0 -1 0; -1 0 0; 0 0 -1], [0 1 0; 1 0 0; -1 -1 -1], [0 1 0; 0 0 1; 1 0 0], 
    [0 -1 0; 0 0 -1; 1 1 1], [0 -1 0; 1 1 1; -1 0 0], [0 1 0; -1 -1 -1; 0 0 1], 
    [0 0 1; 1 0 0; 0 1 0], [0 0 -1; -1 0 0; 1 1 1], [0 0 -1; 0 -1 0; -1 0 0], 
    [0 0 1; 0 1 0; -1 -1 -1], [0 0 1; -1 -1 -1; 1 0 0], [0 0 -1; 1 1 1; 0 -1 0], 
    [1 1 1; -1 0 0; 0 -1 0], [-1 -1 -1; 1 0 0; 0 0 1], [-1 -1 -1; 0 1 0; 1 0 0], 
    [1 1 1; 0 -1 0; 0 0 -1], [1 1 1; 0 0 -1; -1 0 0], [-1 -1 -1; 0 0 1; 0 1 0]
]]

function saturate(S, stabiliser)
    @assert typeof(first(S)) == eltype(stabiliser)
    saturated_list = [g^(-1)*s*g for s in S for g in stabiliser]
    return collect(Set(saturated_list))
end

S_m2, S_m31, S_m32 = saturate(S,m2_stab), saturate(S,m31_stab), saturate(S,m32_stab)
S_sat = collect(union(S_m2,S_m31,S_m32,m2_stab,m31_stab,m32_stab))
S_sat_inv = collect(Set([S_sat; inv.(S_sat)]))
ball2_sat, sizes_sat = Groups.wlmetric_ball(S_sat_inv, radius = 2)
outsiders_d4₁₁ = [gelt_from_matrix(M,ball8) for M in [
    [-1 0 0; 1 0 1; 1 1 0],[0 0 1; -1 0 -1; -1 -1 0],
    [-1 0 -1; 1 0 0; -1 -1 0],[1 0 1; 0 0 -1; 1 1 0]
]]
half_basis_sat = collect(union(ball2_sat,outsiders_d4₁₁))
RG = LowCohomologySOS.group_ring(sl3, half_basis_sat, star_multiplication = false)

function averaged_rep(matrix_list)
    sum_ = sum(RG(gelt_from_matrix(M, half_basis_sat)) for M in matrix_list)
    stab_order = length(matrix_list)
    return sum_//stab_order
end

function rg_elt(differential_data)
    return sum(dd[1]*dd[2] for dd in differential_data)
end

d3₁ = rg_elt([
    (1,averaged_rep(
        [[0 1 0; 0 0 1; 1 1 0], [0 -1 0; 0 0 -1; 1 1 0], [0 -1 0; 0 0 1; -1 -1 0], 
        [0 1 0; 0 0 -1; -1 -1 0], [0 -1 0; 1 1 0; 0 0 1], [0 1 0; -1 -1 0; 0 0 1], 
        [0 1 0; 1 1 0; 0 0 -1], [0 -1 0; -1 -1 0; 0 0 -1], [0 0 -1; 0 1 0; 1 1 0], 
        [0 0 1; 0 -1 0; 1 1 0], [0 0 1; 0 1 0; -1 -1 0], [0 0 -1; 0 -1 0; -1 -1 0], 
        [0 0 1; 1 1 0; 0 1 0], [0 0 -1; -1 -1 0; 0 1 0], [0 0 -1; 1 1 0; 0 -1 0], 
        [0 0 1; -1 -1 0; 0 -1 0], [1 1 0; 0 1 0; 0 0 1], [-1 -1 0; 0 -1 0; 0 0 1], 
        [-1 -1 0; 0 1 0; 0 0 -1], [1 1 0; 0 -1 0; 0 0 -1], [-1 -1 0; 0 0 1; 0 1 0], 
        [1 1 0; 0 0 -1; 0 1 0], [1 1 0; 0 0 1; 0 -1 0], [-1 -1 0; 0 0 -1; 0 -1 0]]
    )),
    (-1,averaged_rep(
        [[-1 0 0; 0 0 1; 1 1 0], [1 0 0; 0 0 -1; 1 1 0], [1 0 0; 0 0 1; -1 -1 0], 
        [-1 0 0; 0 0 -1; -1 -1 0], [1 0 0; 1 1 0; 0 0 1], [-1 0 0; -1 -1 0; 0 0 1], 
        [-1 0 0; 1 1 0; 0 0 -1], [1 0 0; -1 -1 0; 0 0 -1], [0 0 1; 1 0 0; 1 1 0], 
        [0 0 -1; -1 0 0; 1 1 0], [0 0 -1; 1 0 0; -1 -1 0], [0 0 1; -1 0 0; -1 -1 0], 
        [0 0 -1; 1 1 0; 1 0 0], [0 0 1; -1 -1 0; 1 0 0], [0 0 1; 1 1 0; -1 0 0], 
        [0 0 -1; -1 -1 0; -1 0 0], [-1 -1 0; 1 0 0; 0 0 1], [1 1 0; -1 0 0; 0 0 1], 
        [1 1 0; 1 0 0; 0 0 -1], [-1 -1 0; -1 0 0; 0 0 -1], [1 1 0; 0 0 1; 1 0 0], 
        [-1 -1 0; 0 0 -1; 1 0 0], [-1 -1 0; 0 0 1; -1 0 0], [1 1 0; 0 0 -1; -1 0 0]]
    )),
    (-1,averaged_rep(
        [[1 0 0; 0 1 0; 0 0 1], [-1 0 0; 0 -1 0; 0 0 1], [-1 0 0; 0 1 0; 0 0 -1], 
        [1 0 0; 0 -1 0; 0 0 -1], [-1 0 0; 0 0 1; 0 1 0], [1 0 0; 0 0 -1; 0 1 0], 
        [1 0 0; 0 0 1; 0 -1 0], [-1 0 0; 0 0 -1; 0 -1 0], [0 -1 0; 1 0 0; 0 0 1], 
        [0 1 0; -1 0 0; 0 0 1], [0 1 0; 1 0 0; 0 0 -1], [0 -1 0; -1 0 0; 0 0 -1], 
        [0 1 0; 0 0 1; 1 0 0], [0 -1 0; 0 0 -1; 1 0 0], [0 -1 0; 0 0 1; -1 0 0], 
        [0 1 0; 0 0 -1; -1 0 0], [0 0 1; 1 0 0; 0 1 0], [0 0 -1; -1 0 0; 0 1 0], 
        [0 0 -1; 1 0 0; 0 -1 0], [0 0 1; -1 0 0; 0 -1 0], [0 0 -1; 0 1 0; 1 0 0], 
        [0 0 1; 0 -1 0; 1 0 0], [0 0 1; 0 1 0; -1 0 0], [0 0 -1; 0 -1 0; -1 0 0]]
    ))
])
d3₂ = rg_elt([
    (1,averaged_rep(
        [[0 1 0; 0 0 1; 1 1 1], [0 -1 0; 0 0 -1; 1 1 1], [0 -1 0; 0 0 1; -1 -1 -1], 
        [0 1 0; 0 0 -1; -1 -1 -1], [0 -1 0; 1 1 1; 0 0 1], [0 1 0; -1 -1 -1; 0 0 1], 
        [0 1 0; 1 1 1; 0 0 -1], [0 -1 0; -1 -1 -1; 0 0 -1], [0 0 -1; 0 1 0; 1 1 1], 
        [0 0 1; 0 -1 0; 1 1 1], [0 0 1; 0 1 0; -1 -1 -1], [0 0 -1; 0 -1 0; -1 -1 -1], 
        [0 0 1; 1 1 1; 0 1 0], [0 0 -1; -1 -1 -1; 0 1 0], [0 0 -1; 1 1 1; 0 -1 0], 
        [0 0 1; -1 -1 -1; 0 -1 0], [1 1 1; 0 1 0; 0 0 1], [-1 -1 -1; 0 -1 0; 0 0 1], 
        [-1 -1 -1; 0 1 0; 0 0 -1], [1 1 1; 0 -1 0; 0 0 -1], [-1 -1 -1; 0 0 1; 0 1 0], 
        [1 1 1; 0 0 -1; 0 1 0], [1 1 1; 0 0 1; 0 -1 0], [-1 -1 -1; 0 0 -1; 0 -1 0]]
    )),
    (-1,averaged_rep(
        [[-1 0 0; 0 0 1; 1 1 1], [1 0 0; 0 0 -1; 1 1 1], [1 0 0; 0 0 1; -1 -1 -1], 
        [-1 0 0; 0 0 -1; -1 -1 -1], [1 0 0; 1 1 1; 0 0 1], [-1 0 0; -1 -1 -1; 0 0 1], 
        [-1 0 0; 1 1 1; 0 0 -1], [1 0 0; -1 -1 -1; 0 0 -1], [0 0 1; 1 0 0; 1 1 1], 
        [0 0 -1; -1 0 0; 1 1 1], [0 0 -1; 1 0 0; -1 -1 -1], [0 0 1; -1 0 0; -1 -1 -1], 
        [0 0 -1; 1 1 1; 1 0 0], [0 0 1; -1 -1 -1; 1 0 0], [0 0 1; 1 1 1; -1 0 0], 
        [0 0 -1; -1 -1 -1; -1 0 0], [-1 -1 -1; 1 0 0; 0 0 1], [1 1 1; -1 0 0; 0 0 1], 
        [1 1 1; 1 0 0; 0 0 -1], [-1 -1 -1; -1 0 0; 0 0 -1], [1 1 1; 0 0 1; 1 0 0], 
        [-1 -1 -1; 0 0 -1; 1 0 0], [-1 -1 -1; 0 0 1; -1 0 0], [1 1 1; 0 0 -1; -1 0 0]]
    )),
    (1,averaged_rep(
        [[1 0 0; 0 1 0; 1 1 1], [-1 0 0; 0 -1 0; 1 1 1], [-1 0 0; 0 1 0; -1 -1 -1], 
        [1 0 0; 0 -1 0; -1 -1 -1], [-1 0 0; 1 1 1; 0 1 0], [1 0 0; -1 -1 -1; 0 1 0], 
        [1 0 0; 1 1 1; 0 -1 0], [-1 0 0; -1 -1 -1; 0 -1 0], [0 -1 0; 1 0 0; 1 1 1], 
        [0 1 0; -1 0 0; 1 1 1], [0 1 0; 1 0 0; -1 -1 -1], [0 -1 0; -1 0 0; -1 -1 -1], 
        [0 1 0; 1 1 1; 1 0 0], [0 -1 0; -1 -1 -1; 1 0 0], [0 -1 0; 1 1 1; -1 0 0], 
        [0 1 0; -1 -1 -1; -1 0 0], [1 1 1; 1 0 0; 0 1 0], [-1 -1 -1; -1 0 0; 0 1 0], 
        [-1 -1 -1; 1 0 0; 0 -1 0], [1 1 1; -1 0 0; 0 -1 0], [-1 -1 -1; 0 1 0; 1 0 0], 
        [1 1 1; 0 -1 0; 1 0 0], [1 1 1; 0 1 0; -1 0 0], [-1 -1 -1; 0 -1 0; -1 0 0]]
    )),
    (-1,averaged_rep(
        [[1 0 0; 0 1 0; 0 0 1], [-1 0 0; 0 -1 0; 0 0 1], [-1 0 0; 0 1 0; 0 0 -1], 
        [1 0 0; 0 -1 0; 0 0 -1], [-1 0 0; 0 0 1; 0 1 0], [1 0 0; 0 0 -1; 0 1 0], 
        [1 0 0; 0 0 1; 0 -1 0], [-1 0 0; 0 0 -1; 0 -1 0], [0 -1 0; 1 0 0; 0 0 1], 
        [0 1 0; -1 0 0; 0 0 1], [0 1 0; 1 0 0; 0 0 -1], [0 -1 0; -1 0 0; 0 0 -1], 
        [0 1 0; 0 0 1; 1 0 0], [0 -1 0; 0 0 -1; 1 0 0], [0 -1 0; 0 0 1; -1 0 0], 
        [0 1 0; 0 0 -1; -1 0 0], [0 0 1; 1 0 0; 0 1 0], [0 0 -1; -1 0 0; 0 1 0], 
        [0 0 -1; 1 0 0; 0 -1 0], [0 0 1; -1 0 0; 0 -1 0], [0 0 -1; 0 1 0; 1 0 0], 
        [0 0 1; 0 -1 0; 1 0 0], [0 0 1; 0 1 0; -1 0 0], [0 0 -1; 0 -1 0; -1 0 0]]
    ))
])
d4₁ = rg_elt([
    (-1,averaged_rep(
        [[1 0 0; 0 0 1; -1 -1 0], [-1 0 0; 0 0 -1; -1 -1 0], [-1 0 0; 1 0 1; 1 1 0], 
        [1 0 0; -1 0 -1; 1 1 0], [0 0 1; 1 0 0; 1 1 0], [0 0 -1; -1 0 0; 1 1 0], 
        [0 0 -1; 1 0 1; -1 -1 0], [0 0 1; -1 0 -1; -1 -1 0], [-1 0 -1; 1 0 0; -1 -1 0], 
        [1 0 1; -1 0 0; -1 -1 0], [-1 0 -1; 0 0 1; 1 1 0], [1 0 1; 0 0 -1; 1 1 0]]
    )),
    (1,averaged_rep(
        [[1 0 0; 0 1 0; 1 0 1], [-1 0 0; 0 -1 0; 1 0 1], [-1 0 0; 1 1 0; -1 0 -1], 
        [1 0 0; -1 -1 0; -1 0 -1], [0 1 0; 1 0 0; -1 0 -1], [0 -1 0; -1 0 0; -1 0 -1], 
        [0 -1 0; 1 1 0; 1 0 1], [0 1 0; -1 -1 0; 1 0 1], [-1 -1 0; 1 0 0; 1 0 1], 
        [1 1 0; -1 0 0; 1 0 1], [-1 -1 0; 0 1 0; -1 0 -1], [1 1 0; 0 -1 0; -1 0 -1]]

    )),
    (-1,averaged_rep(
        [[1 0 0; 0 0 1; 0 -1 0], [-1 0 0; 0 0 -1; 0 -1 0], [-1 0 0; 1 0 1; 0 1 0], 
        [1 0 0; -1 0 -1; 0 1 0], [0 0 1; 1 0 0; 0 1 0], [0 0 -1; -1 0 0; 0 1 0], 
        [0 0 -1; 1 0 1; 0 -1 0], [0 0 1; -1 0 -1; 0 -1 0], [-1 0 -1; 1 0 0; 0 -1 0], 
        [1 0 1; -1 0 0; 0 -1 0], [-1 0 -1; 0 0 1; 0 1 0], [1 0 1; 0 0 -1; 0 1 0]]
    )),
    (1,averaged_rep(
        [[1 0 0; 0 1 0; 0 0 1], [-1 0 0; 0 -1 0; 0 0 1], [-1 0 0; 1 1 0; 0 0 -1], 
        [1 0 0; -1 -1 0; 0 0 -1], [0 1 0; 1 0 0; 0 0 -1], [0 -1 0; -1 0 0; 0 0 -1], 
        [0 -1 0; 1 1 0; 0 0 1], [0 1 0; -1 -1 0; 0 0 1], [-1 -1 0; 1 0 0; 0 0 1], 
        [1 1 0; -1 0 0; 0 0 1], [-1 -1 0; 0 1 0; 0 0 -1], [1 1 0; 0 -1 0; 0 0 -1]]
    ))
])
d4₂ = rg_elt([
    (1,averaged_rep(
        [[0 1 0; 0 0 -1; -1 -1 0], [0 -1 0; 0 0 1; -1 0 -1], [0 -1 0; 1 1 0; 0 0 1], 
        [0 1 0; -1 -1 0; 1 0 1], [0 1 0; 1 0 1; 0 0 -1], [0 -1 0; -1 0 -1; 1 1 0], 
        [0 0 1; 0 -1 0; 1 1 0], [0 0 -1; 0 1 0; 1 0 1], [0 0 -1; -1 -1 0; 0 1 0], 
        [0 0 1; 1 1 0; -1 0 -1], [0 0 1; -1 0 -1; 0 -1 0], [0 0 -1; 1 0 1; -1 -1 0], 
        [-1 -1 0; 0 1 0; 0 0 -1], [1 1 0; 0 -1 0; -1 0 -1], [1 1 0; 0 0 1; 0 -1 0], 
        [-1 -1 0; 0 0 -1; 1 0 1], [-1 -1 0; 1 0 1; 0 1 0], [1 1 0; -1 0 -1; 0 0 1], 
        [-1 0 -1; 0 -1 0; 0 0 1], [1 0 1; 0 1 0; -1 -1 0], [1 0 1; 0 0 -1; 0 1 0], 
        [-1 0 -1; 0 0 1; 1 1 0], [-1 0 -1; 1 1 0; 0 -1 0], [1 0 1; -1 -1 0; 0 0 -1]]
    ))
])

d3 = [
    d3₁;
    d3₂
]
d4 = [d4₁ d4₂]

Δ₃ = d4'*d4+d3*d3'
Δ₃ == Δ₃'
